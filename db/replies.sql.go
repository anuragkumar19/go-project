// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.22.0
// source: replies.sql

package database

import (
	"context"
	"database/sql"
	"time"
)

const createReply = `-- name: CreateReply :many
INSERT INTO replies (creator_id, post_id, parent_reply_id, content) 
VALUES($1, $2, $3, $4) RETURNING id
`

type CreateReplyParams struct {
	CreatorID     int32         `json:"creator_id"`
	PostID        sql.NullInt32 `json:"post_id"`
	ParentReplyID sql.NullInt32 `json:"parent_reply_id"`
	Content       string        `json:"content"`
}

func (q *Queries) CreateReply(ctx context.Context, arg CreateReplyParams) ([]int32, error) {
	rows, err := q.db.QueryContext(ctx, createReply,
		arg.CreatorID,
		arg.PostID,
		arg.ParentReplyID,
		arg.Content,
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []int32
	for rows.Next() {
		var id int32
		if err := rows.Scan(&id); err != nil {
			return nil, err
		}
		items = append(items, id)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const deleteReply = `-- name: DeleteReply :exec
DELETE FROM replies WHERE id = $1
`

func (q *Queries) DeleteReply(ctx context.Context, id int32) error {
	_, err := q.db.ExecContext(ctx, deleteReply, id)
	return err
}

const findReplyById = `-- name: FindReplyById :many
SELECT id, creator_id, post_id, parent_reply_id FROM replies 
WHERE id = $1
`

type FindReplyByIdRow struct {
	ID            int32         `json:"id"`
	CreatorID     int32         `json:"creator_id"`
	PostID        sql.NullInt32 `json:"post_id"`
	ParentReplyID sql.NullInt32 `json:"parent_reply_id"`
}

func (q *Queries) FindReplyById(ctx context.Context, id int32) ([]FindReplyByIdRow, error) {
	rows, err := q.db.QueryContext(ctx, findReplyById, id)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []FindReplyByIdRow
	for rows.Next() {
		var i FindReplyByIdRow
		if err := rows.Scan(
			&i.ID,
			&i.CreatorID,
			&i.PostID,
			&i.ParentReplyID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getPostReplyPublic = `-- name: GetPostReplyPublic :many
SELECT
    replies.id,
    replies.content,
    replies.parent_reply_id,
    replies.post_id,
    replies.creator_id,
    replies.created_at,
    users.username AS creator_username,
    users.avatar AS creator_avatar,
    users.name AS creator_name,
    COALESCE(r.replies_count, 0) AS replies_count,
    COALESCE(up_votes.up_vote_count, 0) AS up_vote_count,
    COALESCE(down_votes.down_vote_count, 0) AS down_vote_count,
    COALESCE(user_votes.vote, 0) AS vote
FROM
    replies
JOIN
    users ON replies.creator_id = users.id
LEFT JOIN (
    SELECT parent_reply_id, COUNT(id) AS replies_count
    FROM replies as r
    GROUP BY parent_reply_id
) AS r ON replies.id = r.parent_reply_id
LEFT JOIN (
    SELECT reply_id, COUNT(user_id) AS up_vote_count
    FROM vote_reply
    WHERE down = FALSE
    GROUP BY reply_id
) AS up_votes ON replies.id = up_votes.reply_id
LEFT JOIN (
    SELECT reply_id, COUNT(user_id) AS down_vote_count
    FROM vote_reply
    WHERE down = TRUE
    GROUP BY reply_id
) AS down_votes ON replies.id = down_votes.reply_id
LEFT JOIN (
    SELECT reply_id, MAX(CASE WHEN vr.user_id = $4 AND vr.down = FALSE THEN 1 WHEN vr.user_id = $4 AND vr.down = TRUE THEN -1 ELSE 0 END) AS vote
    FROM vote_reply AS vr
    WHERE vr.user_id = $4
    GROUP BY vr.reply_id
) AS user_votes ON replies.id = user_votes.reply_id
WHERE
    replies.post_id = $1
ORDER BY
    replies.created_at DESC
LIMIT
    $2
OFFSET
    $3
`

type GetPostReplyPublicParams struct {
	PostID sql.NullInt32 `json:"post_id"`
	Limit  int32         `json:"limit"`
	Offset int32         `json:"offset"`
	UserID int32         `json:"user_id"`
}

type GetPostReplyPublicRow struct {
	ID              int32         `json:"id"`
	Content         string        `json:"content"`
	ParentReplyID   sql.NullInt32 `json:"parent_reply_id"`
	PostID          sql.NullInt32 `json:"post_id"`
	CreatorID       int32         `json:"creator_id"`
	CreatedAt       time.Time     `json:"created_at"`
	CreatorUsername string        `json:"creator_username"`
	CreatorAvatar   string        `json:"creator_avatar"`
	CreatorName     string        `json:"creator_name"`
	RepliesCount    int64         `json:"replies_count"`
	UpVoteCount     int64         `json:"up_vote_count"`
	DownVoteCount   int64         `json:"down_vote_count"`
	Vote            interface{}   `json:"vote"`
}

func (q *Queries) GetPostReplyPublic(ctx context.Context, arg GetPostReplyPublicParams) ([]GetPostReplyPublicRow, error) {
	rows, err := q.db.QueryContext(ctx, getPostReplyPublic,
		arg.PostID,
		arg.Limit,
		arg.Offset,
		arg.UserID,
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetPostReplyPublicRow
	for rows.Next() {
		var i GetPostReplyPublicRow
		if err := rows.Scan(
			&i.ID,
			&i.Content,
			&i.ParentReplyID,
			&i.PostID,
			&i.CreatorID,
			&i.CreatedAt,
			&i.CreatorUsername,
			&i.CreatorAvatar,
			&i.CreatorName,
			&i.RepliesCount,
			&i.UpVoteCount,
			&i.DownVoteCount,
			&i.Vote,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getReplyByIdPublic = `-- name: GetReplyByIdPublic :many
SELECT
    replies.id,
    replies.content,
    replies.parent_reply_id,
    replies.post_id,
    replies.creator_id,
    replies.created_at,
    users.username AS creator_username,
    users.avatar AS creator_avatar,
    users.name AS creator_name,
    COALESCE(r.replies_count, 0) AS replies_count,
    COALESCE(up_votes.up_vote_count, 0) AS up_vote_count,
    COALESCE(down_votes.down_vote_count, 0) AS down_vote_count,
    COALESCE(user_votes.vote, 0) AS vote
FROM
    replies
JOIN
    users ON replies.creator_id = users.id
LEFT JOIN (
    SELECT parent_reply_id, COUNT(id) AS replies_count
    FROM replies as r
    GROUP BY parent_reply_id
) AS r ON replies.id = r.parent_reply_id
LEFT JOIN (
    SELECT reply_id, COUNT(user_id) AS up_vote_count
    FROM vote_reply
    WHERE down = FALSE
    GROUP BY reply_id
) AS up_votes ON replies.id = up_votes.reply_id
LEFT JOIN (
    SELECT reply_id, COUNT(user_id) AS down_vote_count
    FROM vote_reply
    WHERE down = TRUE
    GROUP BY reply_id
) AS down_votes ON replies.id = down_votes.reply_id
LEFT JOIN (
    SELECT reply_id, MAX(CASE WHEN vr.user_id = $2 AND vr.down = FALSE THEN 1 WHEN vr.user_id = $2 AND vr.down = TRUE THEN -1 ELSE 0 END) AS vote
    FROM vote_reply AS vr
    WHERE vr.user_id = $2
    GROUP BY vr.reply_id
) AS user_votes ON replies.id = user_votes.reply_id
WHERE
    replies.id = $1
`

type GetReplyByIdPublicParams struct {
	ID     int32 `json:"id"`
	UserID int32 `json:"user_id"`
}

type GetReplyByIdPublicRow struct {
	ID              int32         `json:"id"`
	Content         string        `json:"content"`
	ParentReplyID   sql.NullInt32 `json:"parent_reply_id"`
	PostID          sql.NullInt32 `json:"post_id"`
	CreatorID       int32         `json:"creator_id"`
	CreatedAt       time.Time     `json:"created_at"`
	CreatorUsername string        `json:"creator_username"`
	CreatorAvatar   string        `json:"creator_avatar"`
	CreatorName     string        `json:"creator_name"`
	RepliesCount    int64         `json:"replies_count"`
	UpVoteCount     int64         `json:"up_vote_count"`
	DownVoteCount   int64         `json:"down_vote_count"`
	Vote            interface{}   `json:"vote"`
}

func (q *Queries) GetReplyByIdPublic(ctx context.Context, arg GetReplyByIdPublicParams) ([]GetReplyByIdPublicRow, error) {
	rows, err := q.db.QueryContext(ctx, getReplyByIdPublic, arg.ID, arg.UserID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetReplyByIdPublicRow
	for rows.Next() {
		var i GetReplyByIdPublicRow
		if err := rows.Scan(
			&i.ID,
			&i.Content,
			&i.ParentReplyID,
			&i.PostID,
			&i.CreatorID,
			&i.CreatedAt,
			&i.CreatorUsername,
			&i.CreatorAvatar,
			&i.CreatorName,
			&i.RepliesCount,
			&i.UpVoteCount,
			&i.DownVoteCount,
			&i.Vote,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getReplyReplies = `-- name: GetReplyReplies :many
SELECT
    replies.id,
    replies.content,
    replies.parent_reply_id,
    replies.post_id,
    replies.creator_id,
    replies.created_at,
    users.username AS creator_username,
    users.avatar AS creator_avatar,
    users.name AS creator_name,
    COALESCE(r.replies_count, 0) AS replies_count,
    COALESCE(up_votes.up_vote_count, 0) AS up_vote_count,
    COALESCE(down_votes.down_vote_count, 0) AS down_vote_count,
    COALESCE(user_votes.vote, 0) AS vote
FROM
    replies
JOIN
    users ON replies.creator_id = users.id
LEFT JOIN (
    SELECT parent_reply_id, COUNT(id) AS replies_count
    FROM replies as r
    GROUP BY parent_reply_id
) AS r ON replies.id = r.parent_reply_id
LEFT JOIN (
    SELECT reply_id, COUNT(user_id) AS up_vote_count
    FROM vote_reply
    WHERE down = FALSE
    GROUP BY reply_id
) AS up_votes ON replies.id = up_votes.reply_id
LEFT JOIN (
    SELECT reply_id, COUNT(user_id) AS down_vote_count
    FROM vote_reply
    WHERE down = TRUE
    GROUP BY reply_id
) AS down_votes ON replies.id = down_votes.reply_id
LEFT JOIN (
    SELECT reply_id, MAX(CASE WHEN vr.user_id = $4 AND vr.down = FALSE THEN 1 WHEN vr.user_id = $4 AND vr.down = TRUE THEN -1 ELSE 0 END) AS vote
    FROM vote_reply AS vr
    WHERE vr.user_id = $4
    GROUP BY vr.reply_id
) AS user_votes ON replies.id = user_votes.reply_id
WHERE
    replies.parent_reply_id = $1
ORDER BY
    replies.created_at DESC
LIMIT
    $2
OFFSET
    $3
`

type GetReplyRepliesParams struct {
	ParentReplyID sql.NullInt32 `json:"parent_reply_id"`
	Limit         int32         `json:"limit"`
	Offset        int32         `json:"offset"`
	UserID        int32         `json:"user_id"`
}

type GetReplyRepliesRow struct {
	ID              int32         `json:"id"`
	Content         string        `json:"content"`
	ParentReplyID   sql.NullInt32 `json:"parent_reply_id"`
	PostID          sql.NullInt32 `json:"post_id"`
	CreatorID       int32         `json:"creator_id"`
	CreatedAt       time.Time     `json:"created_at"`
	CreatorUsername string        `json:"creator_username"`
	CreatorAvatar   string        `json:"creator_avatar"`
	CreatorName     string        `json:"creator_name"`
	RepliesCount    int64         `json:"replies_count"`
	UpVoteCount     int64         `json:"up_vote_count"`
	DownVoteCount   int64         `json:"down_vote_count"`
	Vote            interface{}   `json:"vote"`
}

func (q *Queries) GetReplyReplies(ctx context.Context, arg GetReplyRepliesParams) ([]GetReplyRepliesRow, error) {
	rows, err := q.db.QueryContext(ctx, getReplyReplies,
		arg.ParentReplyID,
		arg.Limit,
		arg.Offset,
		arg.UserID,
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetReplyRepliesRow
	for rows.Next() {
		var i GetReplyRepliesRow
		if err := rows.Scan(
			&i.ID,
			&i.Content,
			&i.ParentReplyID,
			&i.PostID,
			&i.CreatorID,
			&i.CreatedAt,
			&i.CreatorUsername,
			&i.CreatorAvatar,
			&i.CreatorName,
			&i.RepliesCount,
			&i.UpVoteCount,
			&i.DownVoteCount,
			&i.Vote,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getReplyVote = `-- name: GetReplyVote :many
SELECT reply_id, user_id, down FROM vote_reply
WHERE reply_id = $1 AND user_id = $2
`

type GetReplyVoteParams struct {
	ReplyID int32 `json:"reply_id"`
	UserID  int32 `json:"user_id"`
}

type GetReplyVoteRow struct {
	ReplyID int32 `json:"reply_id"`
	UserID  int32 `json:"user_id"`
	Down    bool  `json:"down"`
}

func (q *Queries) GetReplyVote(ctx context.Context, arg GetReplyVoteParams) ([]GetReplyVoteRow, error) {
	rows, err := q.db.QueryContext(ctx, getReplyVote, arg.ReplyID, arg.UserID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetReplyVoteRow
	for rows.Next() {
		var i GetReplyVoteRow
		if err := rows.Scan(&i.ReplyID, &i.UserID, &i.Down); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getUserReplyPublic = `-- name: GetUserReplyPublic :many
SELECT
    replies.id,
    replies.content,
    replies.parent_reply_id,
    replies.post_id,
    replies.creator_id,
    replies.created_at,
    users.username AS creator_username,
    users.avatar AS creator_avatar,
    users.name AS creator_name,
    COALESCE(r.replies_count, 0) AS replies_count,
    COALESCE(up_votes.up_vote_count, 0) AS up_vote_count,
    COALESCE(down_votes.down_vote_count, 0) AS down_vote_count,
    COALESCE(user_votes.vote, 0) AS vote
FROM
    replies
JOIN
    users ON replies.creator_id = users.id
LEFT JOIN (
    SELECT parent_reply_id, COUNT(id) AS replies_count
    FROM replies as r
    GROUP BY parent_reply_id
) AS r ON replies.id = r.parent_reply_id
LEFT JOIN (
    SELECT reply_id, COUNT(user_id) AS up_vote_count
    FROM vote_reply
    WHERE down = FALSE
    GROUP BY reply_id
) AS up_votes ON replies.id = up_votes.reply_id
LEFT JOIN (
    SELECT reply_id, COUNT(user_id) AS down_vote_count
    FROM vote_reply
    WHERE down = TRUE
    GROUP BY reply_id
) AS down_votes ON replies.id = down_votes.reply_id
LEFT JOIN (
    SELECT reply_id, MAX(CASE WHEN vr.user_id = $4 AND vr.down = FALSE THEN 1 WHEN vr.user_id = $4 AND vr.down = TRUE THEN -1 ELSE 0 END) AS vote
    FROM vote_reply AS vr
    WHERE vr.user_id = $4
    GROUP BY vr.reply_id
) AS user_votes ON replies.id = user_votes.reply_id
WHERE
    replies.creator_id = $1
ORDER BY
    replies.created_at DESC
LIMIT
    $2
OFFSET
    $3
`

type GetUserReplyPublicParams struct {
	CreatorID int32 `json:"creator_id"`
	Limit     int32 `json:"limit"`
	Offset    int32 `json:"offset"`
	UserID    int32 `json:"user_id"`
}

type GetUserReplyPublicRow struct {
	ID              int32         `json:"id"`
	Content         string        `json:"content"`
	ParentReplyID   sql.NullInt32 `json:"parent_reply_id"`
	PostID          sql.NullInt32 `json:"post_id"`
	CreatorID       int32         `json:"creator_id"`
	CreatedAt       time.Time     `json:"created_at"`
	CreatorUsername string        `json:"creator_username"`
	CreatorAvatar   string        `json:"creator_avatar"`
	CreatorName     string        `json:"creator_name"`
	RepliesCount    int64         `json:"replies_count"`
	UpVoteCount     int64         `json:"up_vote_count"`
	DownVoteCount   int64         `json:"down_vote_count"`
	Vote            interface{}   `json:"vote"`
}

func (q *Queries) GetUserReplyPublic(ctx context.Context, arg GetUserReplyPublicParams) ([]GetUserReplyPublicRow, error) {
	rows, err := q.db.QueryContext(ctx, getUserReplyPublic,
		arg.CreatorID,
		arg.Limit,
		arg.Offset,
		arg.UserID,
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetUserReplyPublicRow
	for rows.Next() {
		var i GetUserReplyPublicRow
		if err := rows.Scan(
			&i.ID,
			&i.Content,
			&i.ParentReplyID,
			&i.PostID,
			&i.CreatorID,
			&i.CreatedAt,
			&i.CreatorUsername,
			&i.CreatorAvatar,
			&i.CreatorName,
			&i.RepliesCount,
			&i.UpVoteCount,
			&i.DownVoteCount,
			&i.Vote,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const removeReplyVote = `-- name: RemoveReplyVote :exec
DELETE FROM vote_reply
WHERE vote_reply.reply_id = $1 AND vote_reply.user_id = $2
`

type RemoveReplyVoteParams struct {
	ReplyID int32 `json:"reply_id"`
	UserID  int32 `json:"user_id"`
}

func (q *Queries) RemoveReplyVote(ctx context.Context, arg RemoveReplyVoteParams) error {
	_, err := q.db.ExecContext(ctx, removeReplyVote, arg.ReplyID, arg.UserID)
	return err
}

const voteReply = `-- name: VoteReply :exec
INSERT INTO vote_reply (reply_id, user_id, down)
VALUES ($1, $2, $3)
ON CONFLICT (reply_id, user_id)
DO UPDATE SET down = $3
WHERE vote_reply.reply_id = $1 AND vote_reply.user_id = $2
`

type VoteReplyParams struct {
	ReplyID int32 `json:"reply_id"`
	UserID  int32 `json:"user_id"`
	Down    bool  `json:"down"`
}

func (q *Queries) VoteReply(ctx context.Context, arg VoteReplyParams) error {
	_, err := q.db.ExecContext(ctx, voteReply, arg.ReplyID, arg.UserID, arg.Down)
	return err
}
