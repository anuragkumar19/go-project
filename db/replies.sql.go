// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.22.0
// source: replies.sql

package database

import (
	"context"
	"database/sql"
)

const createReply = `-- name: CreateReply :many
INSERT INTO replies (creator_id, post_id, parent_reply_id, content) 
VALUES($1, $2, $3, $4) RETURNING id
`

type CreateReplyParams struct {
	CreatorID     int32         `json:"creator_id"`
	PostID        sql.NullInt32 `json:"post_id"`
	ParentReplyID sql.NullInt32 `json:"parent_reply_id"`
	Content       string        `json:"content"`
}

func (q *Queries) CreateReply(ctx context.Context, arg CreateReplyParams) ([]int32, error) {
	rows, err := q.db.QueryContext(ctx, createReply,
		arg.CreatorID,
		arg.PostID,
		arg.ParentReplyID,
		arg.Content,
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []int32
	for rows.Next() {
		var id int32
		if err := rows.Scan(&id); err != nil {
			return nil, err
		}
		items = append(items, id)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const deleteReply = `-- name: DeleteReply :exec
DELETE FROM replies WHERE id = $1
`

func (q *Queries) DeleteReply(ctx context.Context, id int32) error {
	_, err := q.db.ExecContext(ctx, deleteReply, id)
	return err
}

const findReplyById = `-- name: FindReplyById :many
SELECT id, creator_id, post_id, parent_reply_id FROM replies 
WHERE id = $1
`

type FindReplyByIdRow struct {
	ID            int32         `json:"id"`
	CreatorID     int32         `json:"creator_id"`
	PostID        sql.NullInt32 `json:"post_id"`
	ParentReplyID sql.NullInt32 `json:"parent_reply_id"`
}

func (q *Queries) FindReplyById(ctx context.Context, id int32) ([]FindReplyByIdRow, error) {
	rows, err := q.db.QueryContext(ctx, findReplyById, id)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []FindReplyByIdRow
	for rows.Next() {
		var i FindReplyByIdRow
		if err := rows.Scan(
			&i.ID,
			&i.CreatorID,
			&i.PostID,
			&i.ParentReplyID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getReplyVote = `-- name: GetReplyVote :many
SELECT reply_id, user_id, down FROM vote_reply
WHERE reply_id = $1 AND user_id = $2
`

type GetReplyVoteParams struct {
	ReplyID int32 `json:"reply_id"`
	UserID  int32 `json:"user_id"`
}

type GetReplyVoteRow struct {
	ReplyID int32 `json:"reply_id"`
	UserID  int32 `json:"user_id"`
	Down    bool  `json:"down"`
}

func (q *Queries) GetReplyVote(ctx context.Context, arg GetReplyVoteParams) ([]GetReplyVoteRow, error) {
	rows, err := q.db.QueryContext(ctx, getReplyVote, arg.ReplyID, arg.UserID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetReplyVoteRow
	for rows.Next() {
		var i GetReplyVoteRow
		if err := rows.Scan(&i.ReplyID, &i.UserID, &i.Down); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const removeReplyVote = `-- name: RemoveReplyVote :exec
DELETE FROM vote_reply
WHERE vote_reply.reply_id = $1 AND vote_reply.user_id = $2
`

type RemoveReplyVoteParams struct {
	ReplyID int32 `json:"reply_id"`
	UserID  int32 `json:"user_id"`
}

func (q *Queries) RemoveReplyVote(ctx context.Context, arg RemoveReplyVoteParams) error {
	_, err := q.db.ExecContext(ctx, removeReplyVote, arg.ReplyID, arg.UserID)
	return err
}

const voteReply = `-- name: VoteReply :exec
INSERT INTO vote_reply (reply_id, user_id, down)
VALUES ($1, $2, $3)
ON CONFLICT
DO UPDATE SET down = $3
WHERE vote_reply.reply_id = $1 AND vote_reply.user_id = $2
`

type VoteReplyParams struct {
	ReplyID int32 `json:"reply_id"`
	UserID  int32 `json:"user_id"`
	Down    bool  `json:"down"`
}

func (q *Queries) VoteReply(ctx context.Context, arg VoteReplyParams) error {
	_, err := q.db.ExecContext(ctx, voteReply, arg.ReplyID, arg.UserID, arg.Down)
	return err
}
