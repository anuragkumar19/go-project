// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.22.0
// source: users.sql

package database

import (
	"context"
	"database/sql"
)

const createUser = `-- name: CreateUser :many
INSERT INTO users (
  name, username, email, password, otp, otp_expiry
) VALUES (
  $1, $2, $3, $4, $5, $6
)
RETURNING id
`

type CreateUserParams struct {
	Name      string
	Username  string
	Email     string
	Password  string
	Otp       sql.NullString
	OtpExpiry sql.NullTime
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) ([]int32, error) {
	rows, err := q.db.QueryContext(ctx, createUser,
		arg.Name,
		arg.Username,
		arg.Email,
		arg.Password,
		arg.Otp,
		arg.OtpExpiry,
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []int32
	for rows.Next() {
		var id int32
		if err := rows.Scan(&id); err != nil {
			return nil, err
		}
		items = append(items, id)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const findUserByEmail = `-- name: FindUserByEmail :many
SELECT id, is_email_verified, username 
FROM users 
WHERE email = $1
`

type FindUserByEmailRow struct {
	ID              int32
	IsEmailVerified bool
	Username        string
}

func (q *Queries) FindUserByEmail(ctx context.Context, email string) ([]FindUserByEmailRow, error) {
	rows, err := q.db.QueryContext(ctx, findUserByEmail, email)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []FindUserByEmailRow
	for rows.Next() {
		var i FindUserByEmailRow
		if err := rows.Scan(&i.ID, &i.IsEmailVerified, &i.Username); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const findUserByUsername = `-- name: FindUserByUsername :many
SELECT id, is_email_verified, username 
FROM users 
WHERE username = $1
`

type FindUserByUsernameRow struct {
	ID              int32
	IsEmailVerified bool
	Username        string
}

func (q *Queries) FindUserByUsername(ctx context.Context, username string) ([]FindUserByUsernameRow, error) {
	rows, err := q.db.QueryContext(ctx, findUserByUsername, username)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []FindUserByUsernameRow
	for rows.Next() {
		var i FindUserByUsernameRow
		if err := rows.Scan(&i.ID, &i.IsEmailVerified, &i.Username); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateUser = `-- name: UpdateUser :many
UPDATE users 
SET name = $2, username = $3, email = $4, password = $5, otp = $6, otp_expiry = $7
WHERE id = $1
RETURNING id
`

type UpdateUserParams struct {
	ID        int32
	Name      string
	Username  string
	Email     string
	Password  string
	Otp       sql.NullString
	OtpExpiry sql.NullTime
}

func (q *Queries) UpdateUser(ctx context.Context, arg UpdateUserParams) ([]int32, error) {
	rows, err := q.db.QueryContext(ctx, updateUser,
		arg.ID,
		arg.Name,
		arg.Username,
		arg.Email,
		arg.Password,
		arg.Otp,
		arg.OtpExpiry,
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []int32
	for rows.Next() {
		var id int32
		if err := rows.Scan(&id); err != nil {
			return nil, err
		}
		items = append(items, id)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
